@page "/Collection"
@using System.Timers;
<PageTitle>Sběr dat</PageTitle>

@inject NavigationManager navManager
@inject IJSRuntime js
@inject ILocalStorageService localStorage

<MudStack Spacing="2">
    @if (sensorsAvailable is null)
    {
        <MudText Typo="Typo.h6">Testování senzorů...</MudText>
    }
    else if (sensorsAvailable == false)
    {
        <MudText Typo="Typo.h6">Senzory jsou nedostupné</MudText>
        <MudText Typo="Typo.body1">K senzorům ve vašem zařízení nebylo možné získat přístup. Tato aplikace je mířena na prohlížeč Chrome na mobilních zařízeních.</MudText>
    }
    else
    {
        <MudText Typo="Typo.h6">Sběr dat</MudText>

        <MudSelect @bind-Value="movement"
                   T="MovementType?"
                   ToStringFunc="(value) => value?.ToName()"
                   Label="Typ pohybu"
                   HelperText="Zvolte typ pohybu, který bude vykonáván"
                   Variant="Variant.Outlined"
                   AnchorOrigin="Origin.BottomCenter"
                   PopoverClass="mt-1">
            @foreach (var value in movements)
            {
                <MudSelectItem Value="value" />
            }
        </MudSelect>

        <MudTextField @bind-Value="note" Label="Poznámka" MaxLength="400" Variant="Variant.Outlined" />

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="my-4"
                   Style="height: 80px"
                   OnClick="ShowStartDialog"
                   Disabled="movement is null">
            Start sběru dat senzorů
        </MudButton>

        <MudDivider Class="mt-2 mb-2" />

        <MudText Typo="Typo.h6">Pomocné údaje (vše nepovinné)</MudText>

        <MudTextField @bind-Value="userInfo.Phone" @bind-Value:after="SaveUserInfo" Label="Model telefonu" MaxLength="100" Variant="Variant.Outlined" />
        <MudSelect @bind-Value="userInfo.Gender" @bind-Value:after="SaveUserInfo"
                   ToStringFunc="(value) => value?.ToName()"
                   Label="Pohlaví"
                   Variant="Variant.Outlined"
                   AnchorOrigin="Origin.BottomCenter"
                   PopoverClass="mt-1">
            <MudSelectItem Value="null" T="Gender?">Nevybráno</MudSelectItem>
            @foreach (var value in Enum.GetValues(typeof(Gender)).Cast<Gender?>())
            {
                <MudSelectItem Value="value" />
            }
        </MudSelect>
        <MudNumericField @bind-Value="userInfo.Age" @bind-Value:after="SaveUserInfo" Label="Věk" Min="0" Max="150" Variant="Variant.Outlined" />
        <MudNumericField @bind-Value="userInfo.Height" @bind-Value:after="SaveUserInfo" Label="Výška [cm]" Min="0" Max="300" Variant="Variant.Outlined" />
        <MudNumericField @bind-Value="userInfo.Weight" @bind-Value:after="SaveUserInfo" Label="Váha [kg]" Min="0" Max="500" Variant="Variant.Outlined" />
    }
</MudStack>

<MudDialog @bind-IsVisible="startDialogVisible" Options="new() { FullWidth = true }">
    <TitleContent>
        <MudText Typo="Typo.h6">Začátek sběru</MudText>
    </TitleContent>
    <DialogContent>
        <MudStack AlignItems="AlignItems.Center" Spacing="4" Class="mb-2">
            <MudImage Src="images/guide.png" Alt="Orientation guide" Elevation="4" Class="rounded-lg" Height="200" />
            <MudText Typo="Typo.body1">Při sběru držte zařízení tak, jako byste se aktivně dívali na tuto stránku. Sběr provádějte 15 až 45 sekund.</MudText>
            @if (countdown >= 0)
            {
                <MudText Typo="Typo.h5">@(countdown + 1)</MudText>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartTimer" Disabled="@(countdown >= 0)">Start</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool? sensorsAvailable;
    private MovementType? movement;
    private UserInfo userInfo = new();
    private string? note;
    private bool startDialogVisible = false;
    private int countdown = -1;
    private Timer? timer;

    private static readonly MovementType?[] movements =
    {
        MovementType.Lay,
        MovementType.OnTable,
        MovementType.Sit,
        MovementType.Walk,
        MovementType.Run,
        MovementType.StairsDown,
        MovementType.StairsUp,
        MovementType.Car,
        MovementType.Bus,
        MovementType.Tram,
        MovementType.Train,
        MovementType.Metro,
        MovementType.Other
    };

    protected override async Task OnInitializedAsync()
    {
        sensorsAvailable = await js.InvokeAsync<bool>("sensorsAvailable");
        if (await localStorage.ContainKeyAsync("userInfo"))
        {
            userInfo = await localStorage.GetItemAsync<UserInfo>("userInfo");
        }
    }

    private async Task SaveUserInfo()
    {
        await localStorage.SetItemAsync<UserInfo>("userInfo", userInfo);
    }

    private void ShowStartDialog() => startDialogVisible = true;

    private void StartTimer()
    {
        countdown = 2;
        if (timer is not null)
        {
            timer.Stop();
        }
        timer = new(1000);
        timer.Elapsed += TimerTick;
        timer.AutoReset = true;
        timer.Start();
        InvokeAsync(StateHasChanged);
    }

    public void TimerTick(object? source, ElapsedEventArgs e)
    {
        if (countdown > 0)
        {
            countdown -= 1;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            countdown = -1;
            timer?.Stop();
            StartCollecting();
        }
    }

    private void StartCollecting()
    {
        if (movement is null)
        {
            return;
        }
        if (note is null)
        {
            navManager.NavigateTo($"Collection/{(int)movement}");
        }
        else
        {
            navManager.NavigateTo($"Collection/{(int)movement}/{note}");
        }
    }
}


