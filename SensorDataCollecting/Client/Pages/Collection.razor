@page "/Collection/{MovementTypeIndex:int}/{Note}"
@page "/Collection/{MovementTypeIndex:int}"
<PageTitle>Sběr dat</PageTitle>

@using System.Text.Json

@inject NavigationManager navManager
@inject IDialogService dialogService
@inject IJSRuntime js
@inject ILocalStorageService localStorage
@inject ISnackbar snackbar

<MudStack Spacing="2">
    <MudText Typo="Typo.h6">Probíhá sběr dat</MudText>
    <MudText Typo="Typo.body1">Typ pohybu: @movement?.ToName()</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-4" Style="height: 80px" OnClick="StopCollecting">Ukončit sběr dat</MudButton>
    <MudDivider />

    <MudText Typo="Typo.subtitle2">Accelerometer</MudText>
    <div id="accelerometer-info" class="data-display" />
    <MudDivider />

    <MudText Typo="Typo.subtitle2">Gravity Sensor</MudText>
    <div id="gravitySensor-info" class="data-display" />
    <MudDivider />

    <MudText Typo="Typo.subtitle2">Gyroscope</MudText>
    <div id="gyroscope-info" class="data-display" />
    <MudDivider />

    <MudText Typo="Typo.subtitle2">Linear Acceleration Sensor</MudText>
    <div id="linearAccelerationSensor-info" class="data-display" />
    <MudDivider />

    @* <MudText Typo="Typo.subtitle2">Magnetometer</MudText>
    <div id="magnetometer-info" class="data-display" />
    <MudDivider /> *@

    <MudText Typo="Typo.subtitle2">Absolute Orientation Sensor</MudText>
    <div id="absoluteOrientationSensor-info" class="data-display" />
    <MudDivider />

    <MudText Typo="Typo.subtitle2">Relative Orientation Sensor</MudText>
    <div id="relativeOrientationSensor-info" class="data-display" />
</MudStack>

<MudDialog @bind-IsVisible="stopDialogVisible" Options="new() { FullWidth = true, DisableBackdropClick = true }">
    <TitleContent>
        <MudText Typo="Typo.h6">Sběr ukončen</MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.body1" Class="mb-2">Chcete zaslat nasbíraná data ihned, nebo je lokálně uložit a zaslat později?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="SubmitLocal" Disabled="processing">Lokálně uložit</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitSend" Disabled="processing">Zaslat ihned</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public int MovementTypeIndex { get; set; }
    [Parameter]
    public string? Note { get; set; }

    private MovementType? movement;

    private bool stopDialogVisible = false;
    private bool processing = false;
    private bool collecting = false;

    private DateTime collectionStart;
    private DateTime collectionEnd;

    protected override void OnParametersSet()
    {
        if (!(Enum.IsDefined(typeof(MovementType), MovementTypeIndex)))
        {
            movement = null;
            return;
        }
        movement = (MovementType)MovementTypeIndex;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (collecting || stopDialogVisible)
        {
            return;
        }
        await js.InvokeVoidAsync("startCollecting");
        collectionStart = DateTime.UtcNow;
        collecting = true;
    }

    private async Task StopCollecting()
    {
        if (!collecting)
        {
            return;
        }
        await js.InvokeVoidAsync("stopCollecting");
        stopDialogVisible = true;
        collecting = false;
        collectionEnd = DateTime.UtcNow;
    }

    private async Task<SensorDataWrapper> SaveCollectedData()
    {
        if (movement is null)
        {
            throw new Exception("Movement type was null");
        }
        SavedDataInfo info = new();
        int nextItemId = 1;
        if (await localStorage.ContainKeyAsync("savedDataInfo"))
        {
            info = await localStorage.GetItemAsync<SavedDataInfo>("savedDataInfo");
            nextItemId = info.SavedData.Count == 0 ? 1 : info.SavedData.Max() + 1;
        }
        string jsonData = await js.InvokeAsync<string>("getCollectedData");
        SensorData? data = JsonSerializer.Deserialize<SensorData>(jsonData);
        if (data is null)
        {
            throw new Exception("Could not get sensor data from JS");
        }

        SensorDataWrapper dataWrapper = new()
            {
                Id = nextItemId,
                DataInfo = new()
                {
                    StartTime = collectionStart,
                    EndTime = collectionEnd,
                    Note = Note,
                    Movement = (MovementType)movement,
                    Id = Guid.NewGuid()
                }
            };

        await localStorage.SetItemAsync<SensorDataWrapper>("info" + nextItemId, dataWrapper);
        await localStorage.SetItemAsync<SensorData>("data" + nextItemId, data);
        info.SavedData.Add(nextItemId);
        await localStorage.SetItemAsync<SavedDataInfo>("savedDataInfo", info);
        return dataWrapper;
    }

    private async Task SubmitLocal()
    {
        processing = true;
        await InvokeAsync(StateHasChanged);
        await SaveCollectedData();
        navManager.NavigateTo("Collection");
    }


    private async Task SubmitSend()
    {
        processing = true;
        await InvokeAsync(StateHasChanged);
        SensorDataWrapper data = await SaveCollectedData();
        DataUploader uploader = new DataUploader(localStorage, dialogService, snackbar);
        await uploader.UploadData(data);
        navManager.NavigateTo("Collection");
    }
}
